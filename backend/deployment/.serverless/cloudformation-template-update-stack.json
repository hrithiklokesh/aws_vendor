{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vendor-dashboard-api-dev-api"
      }
    },
    "WebsocketConnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vendor-dashboard-api-dev-websocketConnect"
      }
    },
    "WebsocketDisconnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vendor-dashboard-api-dev-websocketDisconnect"
      }
    },
    "WebsocketMessageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/vendor-dashboard-api-dev-websocketMessage"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "vendor-dashboard-api",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vendor-dashboard-api-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vendor-dashboard-api-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "VendorsTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "GoogleUsersTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "LeadsTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ProjectsTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "WebsocketConnectionsTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": "arn:aws:s3:::mac-vendor-uploads/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "vendor-dashboard-api",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ApiLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vendor-dashboard-api/dev/1747732216407-2025-05-20T09:10:16.407Z/api.zip"
        },
        "Handler": "lambda.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "vendor-dashboard-api-dev-api",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "NODE_ENV": "dev",
            "MONGODB_URI": "mongodb+srv://dhanush:Dhanush123@caasdiglobal.yahxc.mongodb.net/?retryWrites=true&w=majority&appName=CaasdiGlobal",
            "SESSION_SECRET": "517f384b904d4e8a04abfc2ed2cad1422c59b472241bc6fa06908f5dfe93b2e2",
            "GOOGLE_CLIENT_ID": "540364621159-6anfmspca2foov8tif1gvak3vqg089v3.apps.googleusercontent.com",
            "GOOGLE_CLIENT_SECRET": "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",
            "FRONTEND_URL": "http://localhost:5173",
            "S3_BUCKET_NAME": "mac-vendor-uploads",
            "CONNECTIONS_TABLE": "websocket-connections-dev",
            "WEBSOCKET_API_URL": "",
            "MONGO_URI": "mongodb+srv://dhanush:Dhanush123@caasdiglobal.yahxc.mongodb.net/?retryWrites=true&w=majority&appName=CaasdiGlobal",
            "PORT": "5001"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ApiLogGroup"
      ]
    },
    "WebsocketConnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vendor-dashboard-api/dev/1747732216407-2025-05-20T09:10:16.407Z/websocketConnect.zip"
        },
        "Handler": "websocketHandler.connect",
        "Runtime": "nodejs18.x",
        "FunctionName": "vendor-dashboard-api-dev-websocketConnect",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "NODE_ENV": "dev",
            "MONGODB_URI": "mongodb+srv://dhanush:Dhanush123@caasdiglobal.yahxc.mongodb.net/?retryWrites=true&w=majority&appName=CaasdiGlobal",
            "SESSION_SECRET": "517f384b904d4e8a04abfc2ed2cad1422c59b472241bc6fa06908f5dfe93b2e2",
            "GOOGLE_CLIENT_ID": "540364621159-6anfmspca2foov8tif1gvak3vqg089v3.apps.googleusercontent.com",
            "GOOGLE_CLIENT_SECRET": "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",
            "FRONTEND_URL": "http://localhost:5173",
            "S3_BUCKET_NAME": "mac-vendor-uploads",
            "CONNECTIONS_TABLE": "websocket-connections-dev",
            "WEBSOCKET_API_URL": "",
            "MONGO_URI": "mongodb+srv://dhanush:Dhanush123@caasdiglobal.yahxc.mongodb.net/?retryWrites=true&w=majority&appName=CaasdiGlobal",
            "PORT": "5001"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WebsocketConnectLogGroup"
      ]
    },
    "WebsocketDisconnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vendor-dashboard-api/dev/1747732216407-2025-05-20T09:10:16.407Z/websocketDisconnect.zip"
        },
        "Handler": "websocketHandler.disconnect",
        "Runtime": "nodejs18.x",
        "FunctionName": "vendor-dashboard-api-dev-websocketDisconnect",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "NODE_ENV": "dev",
            "MONGODB_URI": "mongodb+srv://dhanush:Dhanush123@caasdiglobal.yahxc.mongodb.net/?retryWrites=true&w=majority&appName=CaasdiGlobal",
            "SESSION_SECRET": "517f384b904d4e8a04abfc2ed2cad1422c59b472241bc6fa06908f5dfe93b2e2",
            "GOOGLE_CLIENT_ID": "540364621159-6anfmspca2foov8tif1gvak3vqg089v3.apps.googleusercontent.com",
            "GOOGLE_CLIENT_SECRET": "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",
            "FRONTEND_URL": "http://localhost:5173",
            "S3_BUCKET_NAME": "mac-vendor-uploads",
            "CONNECTIONS_TABLE": "websocket-connections-dev",
            "WEBSOCKET_API_URL": "",
            "MONGO_URI": "mongodb+srv://dhanush:Dhanush123@caasdiglobal.yahxc.mongodb.net/?retryWrites=true&w=majority&appName=CaasdiGlobal",
            "PORT": "5001"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WebsocketDisconnectLogGroup"
      ]
    },
    "WebsocketMessageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/vendor-dashboard-api/dev/1747732216407-2025-05-20T09:10:16.407Z/websocketMessage.zip"
        },
        "Handler": "websocketHandler.message",
        "Runtime": "nodejs18.x",
        "FunctionName": "vendor-dashboard-api-dev-websocketMessage",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "NODE_ENV": "dev",
            "MONGODB_URI": "mongodb+srv://dhanush:Dhanush123@caasdiglobal.yahxc.mongodb.net/?retryWrites=true&w=majority&appName=CaasdiGlobal",
            "SESSION_SECRET": "517f384b904d4e8a04abfc2ed2cad1422c59b472241bc6fa06908f5dfe93b2e2",
            "GOOGLE_CLIENT_ID": "540364621159-6anfmspca2foov8tif1gvak3vqg089v3.apps.googleusercontent.com",
            "GOOGLE_CLIENT_SECRET": "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",
            "FRONTEND_URL": "http://localhost:5173",
            "S3_BUCKET_NAME": "mac-vendor-uploads",
            "CONNECTIONS_TABLE": "websocket-connections-dev",
            "WEBSOCKET_API_URL": "",
            "MONGO_URI": "mongodb+srv://dhanush:Dhanush123@caasdiglobal.yahxc.mongodb.net/?retryWrites=true&w=majority&appName=CaasdiGlobal",
            "PORT": "5001"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WebsocketMessageLogGroup"
      ]
    },
    "ApiLambdaVersionrPi99OdWxcH7M1jIVAgqIhjBcEPs6u1IZDtF5GVU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ApiLambdaFunction"
        },
        "CodeSha256": "t8T6gTivNws4Ko1cmfXZZjy/YcT8if81mw50gOq2yUw="
      }
    },
    "WebsocketConnectLambdaVersionOBKjbgUV4SObPd0kVWHsQh6P8ESHmay9tm6KQoPhdc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebsocketConnectLambdaFunction"
        },
        "CodeSha256": "ZhC0dOb2ns8yTD20cagijFuGzhzz3WknMlY1vX4m11Q="
      }
    },
    "WebsocketDisconnectLambdaVersionHhYFli3UYLKyP9oDZQWoyv4lUopDjvM7KZ5HRz8DhQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebsocketDisconnectLambdaFunction"
        },
        "CodeSha256": "ZhC0dOb2ns8yTD20cagijFuGzhzz3WknMlY1vX4m11Q="
      }
    },
    "WebsocketMessageLambdaVersionwSKCdRGXBazTAHdVNV1mJ6NN3HwO6UOtRwz5WZbwU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebsocketMessageLambdaFunction"
        },
        "CodeSha256": "ZhC0dOb2ns8yTD20cagijFuGzhzz3WknMlY1vX4m11Q="
      }
    },
    "WebsocketsApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-vendor-dashboard-api-websockets",
        "RouteSelectionExpression": "$request.body.action",
        "Description": "Serverless Websockets",
        "ProtocolType": "WEBSOCKET"
      }
    },
    "WebsocketConnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketConnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "WebsocketDisconnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketDisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "WebsocketMessageWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketMessageLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "WebsocketConnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "WebsocketConnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketConnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "WebsocketDisconnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "WebsocketDisconnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketDisconnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "WebsocketMessageLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "WebsocketMessageLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketMessageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "WebsocketConnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdisconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "WebsocketDisconnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdefaultWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$default",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "WebsocketMessageWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "WebsocketsDeploymentStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "StageName": "dev",
        "Description": "Serverless Websockets",
        "DeploymentId": {
          "Ref": "WebsocketsDeploymentCvcVfsJzyhZPdb6Sho73BDTi7rqYX7DldQMuEca0A"
        }
      }
    },
    "WebsocketsDeploymentCvcVfsJzyhZPdb6Sho73BDTi7rqYX7DldQMuEca0A": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "SconnectWebsocketsRoute",
        "SdisconnectWebsocketsRoute",
        "SdefaultWebsocketsRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "Description": "Serverless Websockets"
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-vendor-dashboard-api",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "ApiLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationApi": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ApiLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteAnyApiProxyVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "ANY /api/{proxy+}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationApi"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationApi"
    },
    "VendorsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "vendors-dev",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "GoogleUsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "google_users-dev",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "googleId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "googleId",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "LeadsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "leads-dev",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "ProjectsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "projects-dev",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "WebsocketConnectionsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "websocket-connections-dev",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "connectionId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "connectionId",
            "KeyType": "HASH"
          }
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-vendor-dashboard-api-dev-ServerlessDeploymentBucketName"
      }
    },
    "ApiLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ApiLambdaVersionrPi99OdWxcH7M1jIVAgqIhjBcEPs6u1IZDtF5GVU"
      },
      "Export": {
        "Name": "sls-vendor-dashboard-api-dev-ApiLambdaFunctionQualifiedArn"
      }
    },
    "WebsocketConnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebsocketConnectLambdaVersionOBKjbgUV4SObPd0kVWHsQh6P8ESHmay9tm6KQoPhdc"
      },
      "Export": {
        "Name": "sls-vendor-dashboard-api-dev-WebsocketConnectLambdaFunctionQualifiedArn"
      }
    },
    "WebsocketDisconnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebsocketDisconnectLambdaVersionHhYFli3UYLKyP9oDZQWoyv4lUopDjvM7KZ5HRz8DhQ"
      },
      "Export": {
        "Name": "sls-vendor-dashboard-api-dev-WebsocketDisconnectLambdaFunctionQualifiedArn"
      }
    },
    "WebsocketMessageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebsocketMessageLambdaVersionwSKCdRGXBazTAHdVNV1mJ6NN3HwO6UOtRwz5WZbwU"
      },
      "Export": {
        "Name": "sls-vendor-dashboard-api-dev-WebsocketMessageLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpointWebsocket": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "WebsocketsApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-vendor-dashboard-api-dev-ServiceEndpointWebsocket"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-vendor-dashboard-api-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-vendor-dashboard-api-dev-HttpApiUrl"
      }
    }
  }
}